


def clear():
    # check and make call for specific operating system
    os_name = platform.system()
    _ = call('clear' if os_name == 'Linux' or 'Windows' or 'Darwin' else 'cls')

subprocess.call('clear', shell=True)

discover_ap = subprocess.Popen(
['sudo', 'airodump-ng', '-w', 'attack', '--write-interval', '1', '--output-format', 'csv',
nic + 'mon'], stdout=PIPE, stderr=PIPE, stdin=PIPE)



    output_pipe = subprocess.run(
        [sys.executable, "//Users//adelal-aali//Documents//CS/PROJECT//django_pythonScripts01//blog//IPQUERY.py"],
        stdout=PIPE, stderr=PIPE, shell=False, check=True, text=True, input=f'{uinput}')  # , stdin=input))

    print(output_pipe)



##### TO EXECECUTE EXTERNAL PY SCRIPT, AND TAKE INPUT
  result = subprocess.run(
        [sys.executable, "//Users//adelal-aali//Documents//CS/PROJECT//django_pythonScripts01//blog//IPQUERY.py"], stdout=PIPE, stderr=PIPE, shell=False, check=True, text=True, input=f'{uinput}')  # , stdin=input))

    print(result)



# -*- coding: utf-8 -*-

import subprocess, sys, os
from subprocess import PIPE, DEVNULL
import traceback


### TO RUN EXTERNAL SCRIPTS
try:
    print('X' * 50)
    print('X' * 50)
    print()
    uinput = '76.172.85.231'
    print(uinput)
    print(type(uinput))

    p = subprocess.Popen(
        ['python', "/Users/adelal-aali/Documents/CS/PROJECT/django_pythonScripts01/blog/IPQUERY.py", uinput],
        shell=False, text=True)  # .decode('utf-8')
    print(p)

    output_capture = subprocess.run(
        [sys.executable, "//Users//adelal-aali//Documents//CS/PROJECT//django_pythonScripts01//blog//IPQUERY.py",
         uinput], capture_output=True, shell=True, text=True)

    print(output_capture)
    print('X' * 50)
    print('X' * 50)
    print()

    output_pipe = subprocess.run(
        [sys.executable, "//Users//adelal-aali//Documents//CS/PROJECT//django_pythonScripts01//blog//IPQUERY.py",
         uinput], stdout=PIPE, stderr=PIPE, shell=False, check=True, text=True)  # , stdin=input)
    print(output_pipe)

    output_devnull = subprocess.run(
        [sys.executable, "//Users//adelal-aali//Documents//CS/PROJECT//django_pythonScripts01//blog//IPQUERY.py",
         uinput], shell=False, check=True, text=True, stdout=DEVNULL, stderr=DEVNULL)  # , stdin=input)

    print(output_devnull)
    print('X' * 50)
    print('X' * 50)
    print()

    proc = subprocess.run(
        ["//Users//adelal-aali//Documents//CS/PROJECT//django_pythonScripts01//blog//IPQUERY.py", uinput],
        stdin=PIPE, stdout=PIPE, stderr=PIPE, check=True)
    stdout_v, stderr_v, = proc.stdout, proc.stderr
    # return_code = proc.return_code
    print(stdout_v)
    print(stderr_v)
    print(return_code)
    print('X' * 50)
    print('X' * 50)


except subprocess.CalledProcessError as e:
    traceback.print_exc()
    raise RuntimeError("[command '{}' return with error (code {}): {}]".format(e.cmd, e.returncode, e.output))

except Exception as E:
    traceback.print_exc()
    print(str(E))




def install():
    try:
        sucessfull_install = []
        subprocess.check_call([sys.executable, "-m", "pip", "install", threading])
        if subprocess.check_call:
            print(f'{yellow} Sucessfully Installed PIP')
            sucessfull_install.append('pip')
        subprocess.check_call([sys.executable, "-m", "tqdm", "install", tqdm])
        if subprocess.check_call:
            print(f'{yellow} Sucessfully Installed TQDM')
            sucessfull_install.append('TQDM')
        subprocess.check_call([sys.executable, "-m", "pip", "datetime", datetime])
        if subprocess.check_call:
            print(f'{yellow} Sucessfully Installed datetime')
            sucessfull_install.append('datetime')
        subprocess.check_call([sys.executable, "-m", "pip", "net-tools", net-tools])
        if subprocess.check_call:
            print(f'{yellow} Sucessfully Installed datetime')
            sucessfull_install.append('net-tools')
        subprocess.check_call([sys.executable, "-m", "apt install", "airmon-ng", airmon-ng])
        if subprocess.check_call:
            print(f'{yellow} Sucessfully Installed airmon-ng')
            sucessfull_install.append('airmong-ng')
        print(f'{yellow}**Installed Dependencies {reset}\n{sucessfull_install}')

    except subprocess.CalledProcessError as sub0:
        traceback.print_exc()
        print(f'{red} SUBPROCESS CALL ERROR {reset}\n{str(sub0)}')
    except subprocess.TimeoutExpired as sub1:
        traceback.print_exc()
        print(f'{red} SUBPROCESS CALL ERROR {reset}\n{str(sub1)}')
    except subprocess.SubprocessError as sub2:
        traceback.print_exc()
        print(f'{red} SUBPROCESS CALL ERROR {reset}\n{str(sub2)}')





